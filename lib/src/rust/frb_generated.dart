// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'pixirust/entities.dart';
import 'udto.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1403140338;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_pansy',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiApiAppendToDownload({
    required List<UiAppendToDownload> values,
  });

  Future<void> crateApiApiCopyImageTo({
    required String srcPath,
    required String toDir,
  });

  Future<LoginUrl> crateApiApiCreateLoginUrl();

  Future<LoginUrl> crateApiApiCreateRegisterUrl();

  Future<String> crateApiApiDesktopRoot();

  Future<List<UiDownloading>> crateApiApiDownloadingList();

  Future<String> crateApiApiDownloadsTo();

  Future<bool> crateApiApiGetInChina();

  String crateApiSimpleGreet({required String name});

  Future<IllustResponse> crateApiApiIllustFromUrl({required String url});

  Future<String> crateApiApiIllustRankFirstUrl({
    required UiIllustRankQuery query,
  });

  Future<String> crateApiApiIllustRecommendedFirstUrl();

  Future<String> crateApiApiIllustSearchFirstUrl({
    required UiIllustSearchQuery query,
  });

  Future<IllustTrendingTags> crateApiApiIllustTrendingTags();

  Future<String> crateApiApiIllustTrendingTagsUrl();

  Future<void> crateApiApiInit({
    required String root,
    required String downloadsTo,
  });

  Future<void> crateApiSimpleInitApp();

  Future<String> crateApiApiLoadPixivImage({required String url});

  Future<String> crateApiApiLoadProperty({required String k});

  Future<bool> crateApiApiLoginByCode({required UiLoginByCodeQuery query});

  Future<void> crateApiApiPerInChina();

  Future<bool> crateApiApiPreLogin();

  Future<void> crateApiApiRecreateDownloadsTo();

  Future<String> crateApiApiRequestUrl({required String params});

  Future<void> crateApiApiResetFailedDownloads();

  Future<void> crateApiApiSaveProperty({required String k, required String v});

  Future<void> crateApiApiSetDownloadsTo({required String newDownloadsTo});

  Future<void> crateApiApiSetInChina({required bool value});

  Future<UserDetail> crateApiApiUserDetail({required PlatformInt64 userId});

  Future<String> crateApiApiUserIllustsFirstUrl({
    required PlatformInt64 userId,
  });
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiApiAppendToDownload({
    required List<UiAppendToDownload> values,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_ui_append_to_download(values, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiAppendToDownloadConstMeta,
        argValues: [values],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiAppendToDownloadConstMeta =>
      const TaskConstMeta(
        debugName: "append_to_download",
        argNames: ["values"],
      );

  @override
  Future<void> crateApiApiCopyImageTo({
    required String srcPath,
    required String toDir,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(srcPath, serializer);
          sse_encode_String(toDir, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiCopyImageToConstMeta,
        argValues: [srcPath, toDir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiCopyImageToConstMeta => const TaskConstMeta(
    debugName: "copy_image_to",
    argNames: ["srcPath", "toDir"],
  );

  @override
  Future<LoginUrl> crateApiApiCreateLoginUrl() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_login_url,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiCreateLoginUrlConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiCreateLoginUrlConstMeta =>
      const TaskConstMeta(debugName: "create_login_url", argNames: []);

  @override
  Future<LoginUrl> crateApiApiCreateRegisterUrl() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_login_url,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiCreateRegisterUrlConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiCreateRegisterUrlConstMeta =>
      const TaskConstMeta(debugName: "create_register_url", argNames: []);

  @override
  Future<String> crateApiApiDesktopRoot() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiDesktopRootConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiDesktopRootConstMeta =>
      const TaskConstMeta(debugName: "desktop_root", argNames: []);

  @override
  Future<List<UiDownloading>> crateApiApiDownloadingList() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_ui_downloading,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiDownloadingListConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiDownloadingListConstMeta =>
      const TaskConstMeta(debugName: "downloading_list", argNames: []);

  @override
  Future<String> crateApiApiDownloadsTo() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiDownloadsToConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiDownloadsToConstMeta =>
      const TaskConstMeta(debugName: "downloads_to", argNames: []);

  @override
  Future<bool> crateApiApiGetInChina() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiGetInChinaConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiGetInChinaConstMeta =>
      const TaskConstMeta(debugName: "get_in_china", argNames: []);

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<IllustResponse> crateApiApiIllustFromUrl({required String url}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_illust_response,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiIllustFromUrlConstMeta,
        argValues: [url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiIllustFromUrlConstMeta =>
      const TaskConstMeta(debugName: "illust_from_url", argNames: ["url"]);

  @override
  Future<String> crateApiApiIllustRankFirstUrl({
    required UiIllustRankQuery query,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_ui_illust_rank_query(query, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiIllustRankFirstUrlConstMeta,
        argValues: [query],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiIllustRankFirstUrlConstMeta =>
      const TaskConstMeta(
        debugName: "illust_rank_first_url",
        argNames: ["query"],
      );

  @override
  Future<String> crateApiApiIllustRecommendedFirstUrl() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiIllustRecommendedFirstUrlConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiIllustRecommendedFirstUrlConstMeta =>
      const TaskConstMeta(
        debugName: "illust_recommended_first_url",
        argNames: [],
      );

  @override
  Future<String> crateApiApiIllustSearchFirstUrl({
    required UiIllustSearchQuery query,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_ui_illust_search_query(query, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiIllustSearchFirstUrlConstMeta,
        argValues: [query],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiIllustSearchFirstUrlConstMeta =>
      const TaskConstMeta(
        debugName: "illust_search_first_url",
        argNames: ["query"],
      );

  @override
  Future<IllustTrendingTags> crateApiApiIllustTrendingTags() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_illust_trending_tags,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiIllustTrendingTagsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiIllustTrendingTagsConstMeta =>
      const TaskConstMeta(debugName: "illust_trending_tags", argNames: []);

  @override
  Future<String> crateApiApiIllustTrendingTagsUrl() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiIllustTrendingTagsUrlConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiIllustTrendingTagsUrlConstMeta =>
      const TaskConstMeta(debugName: "illust_trending_tags_url", argNames: []);

  @override
  Future<void> crateApiApiInit({
    required String root,
    required String downloadsTo,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(root, serializer);
          sse_encode_String(downloadsTo, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiInitConstMeta,
        argValues: [root, downloadsTo],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiInitConstMeta =>
      const TaskConstMeta(debugName: "init", argNames: ["root", "downloadsTo"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<String> crateApiApiLoadPixivImage({required String url}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiLoadPixivImageConstMeta,
        argValues: [url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiLoadPixivImageConstMeta =>
      const TaskConstMeta(debugName: "load_pixiv_image", argNames: ["url"]);

  @override
  Future<String> crateApiApiLoadProperty({required String k}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(k, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiLoadPropertyConstMeta,
        argValues: [k],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiLoadPropertyConstMeta =>
      const TaskConstMeta(debugName: "load_property", argNames: ["k"]);

  @override
  Future<bool> crateApiApiLoginByCode({required UiLoginByCodeQuery query}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_ui_login_by_code_query(query, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiLoginByCodeConstMeta,
        argValues: [query],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiLoginByCodeConstMeta =>
      const TaskConstMeta(debugName: "login_by_code", argNames: ["query"]);

  @override
  Future<void> crateApiApiPerInChina() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPerInChinaConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPerInChinaConstMeta =>
      const TaskConstMeta(debugName: "per_in_china", argNames: []);

  @override
  Future<bool> crateApiApiPreLogin() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiPreLoginConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPreLoginConstMeta =>
      const TaskConstMeta(debugName: "pre_login", argNames: []);

  @override
  Future<void> crateApiApiRecreateDownloadsTo() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiRecreateDownloadsToConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiRecreateDownloadsToConstMeta =>
      const TaskConstMeta(debugName: "recreate_downloads_to", argNames: []);

  @override
  Future<String> crateApiApiRequestUrl({required String params}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(params, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiRequestUrlConstMeta,
        argValues: [params],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiRequestUrlConstMeta =>
      const TaskConstMeta(debugName: "request_url", argNames: ["params"]);

  @override
  Future<void> crateApiApiResetFailedDownloads() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiResetFailedDownloadsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiResetFailedDownloadsConstMeta =>
      const TaskConstMeta(debugName: "reset_failed_downloads", argNames: []);

  @override
  Future<void> crateApiApiSaveProperty({required String k, required String v}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(k, serializer);
          sse_encode_String(v, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiSavePropertyConstMeta,
        argValues: [k, v],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiSavePropertyConstMeta =>
      const TaskConstMeta(debugName: "save_property", argNames: ["k", "v"]);

  @override
  Future<void> crateApiApiSetDownloadsTo({required String newDownloadsTo}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(newDownloadsTo, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiSetDownloadsToConstMeta,
        argValues: [newDownloadsTo],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiSetDownloadsToConstMeta => const TaskConstMeta(
    debugName: "set_downloads_to",
    argNames: ["newDownloadsTo"],
  );

  @override
  Future<void> crateApiApiSetInChina({required bool value}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(value, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiSetInChinaConstMeta,
        argValues: [value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiSetInChinaConstMeta =>
      const TaskConstMeta(debugName: "set_in_china", argNames: ["value"]);

  @override
  Future<UserDetail> crateApiApiUserDetail({required PlatformInt64 userId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_64(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_user_detail,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiUserDetailConstMeta,
        argValues: [userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiUserDetailConstMeta =>
      const TaskConstMeta(debugName: "user_detail", argNames: ["userId"]);

  @override
  Future<String> crateApiApiUserIllustsFirstUrl({
    required PlatformInt64 userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_64(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiApiUserIllustsFirstUrlConstMeta,
        argValues: [userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiUserIllustsFirstUrlConstMeta =>
      const TaskConstMeta(
        debugName: "user_illusts_first_url",
        argNames: ["userId"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Series dco_decode_box_autoadd_series(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_series(raw);
  }

  @protected
  UiIllustRankQuery dco_decode_box_autoadd_ui_illust_rank_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_illust_rank_query(raw);
  }

  @protected
  UiIllustSearchQuery dco_decode_box_autoadd_ui_illust_search_query(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_illust_search_query(raw);
  }

  @protected
  UiLoginByCodeQuery dco_decode_box_autoadd_ui_login_by_code_query(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_login_by_code_query(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Illust dco_decode_illust(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 23)
      throw Exception('unexpected arr length: expect 23 but see ${arr.length}');
    return Illust(
      id: dco_decode_i_64(arr[0]),
      title: dco_decode_String(arr[1]),
      illustType: dco_decode_String(arr[2]),
      imageUrls: dco_decode_main_image_urls(arr[3]),
      caption: dco_decode_String(arr[4]),
      restrict: dco_decode_i_64(arr[5]),
      user: dco_decode_user_sample(arr[6]),
      tags: dco_decode_list_tag(arr[7]),
      tools: dco_decode_list_String(arr[8]),
      createDate: dco_decode_String(arr[9]),
      pageCount: dco_decode_i_64(arr[10]),
      width: dco_decode_i_64(arr[11]),
      height: dco_decode_i_64(arr[12]),
      sanityLevel: dco_decode_i_64(arr[13]),
      xRestrict: dco_decode_i_64(arr[14]),
      series: dco_decode_opt_box_autoadd_series(arr[15]),
      metaSinglePage: dco_decode_meta_single_page(arr[16]),
      metaPages: dco_decode_list_meta_page(arr[17]),
      totalView: dco_decode_i_64(arr[18]),
      totalBookmarks: dco_decode_i_64(arr[19]),
      isBookmarked: dco_decode_bool(arr[20]),
      visible: dco_decode_bool(arr[21]),
      isMuted: dco_decode_bool(arr[22]),
    );
  }

  @protected
  IllustResponse dco_decode_illust_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IllustResponse(
      illusts: dco_decode_list_illust(arr[0]),
      nextUrl: dco_decode_String(arr[1]),
    );
  }

  @protected
  IllustTrendingTags dco_decode_illust_trending_tags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return IllustTrendingTags(trendTags: dco_decode_list_trend_tag(arr[0]));
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Illust> dco_decode_list_illust(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_illust).toList();
  }

  @protected
  List<MetaPage> dco_decode_list_meta_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_meta_page).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Tag> dco_decode_list_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tag).toList();
  }

  @protected
  List<TrendTag> dco_decode_list_trend_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_trend_tag).toList();
  }

  @protected
  List<UiAppendToDownload> dco_decode_list_ui_append_to_download(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_append_to_download)
        .toList();
  }

  @protected
  List<UiDownloading> dco_decode_list_ui_downloading(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_downloading).toList();
  }

  @protected
  LoginUrl dco_decode_login_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LoginUrl(
      verify: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
    );
  }

  @protected
  MainImageUrls dco_decode_main_image_urls(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MainImageUrls(
      squareMedium: dco_decode_String(arr[0]),
      medium: dco_decode_String(arr[1]),
      large: dco_decode_String(arr[2]),
    );
  }

  @protected
  MetaPage dco_decode_meta_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MetaPage(imageUrls: dco_decode_meta_page_image_urls(arr[0]));
  }

  @protected
  MetaPageImageUrls dco_decode_meta_page_image_urls(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MetaPageImageUrls(
      squareMedium: dco_decode_String(arr[0]),
      medium: dco_decode_String(arr[1]),
      large: dco_decode_String(arr[2]),
      original: dco_decode_String(arr[3]),
    );
  }

  @protected
  MetaSinglePage dco_decode_meta_single_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MetaSinglePage(originalImageUrl: dco_decode_opt_String(arr[0]));
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Series? dco_decode_opt_box_autoadd_series(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_series(raw);
  }

  @protected
  Profile dco_decode_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 24)
      throw Exception('unexpected arr length: expect 24 but see ${arr.length}');
    return Profile(
      addressId: dco_decode_i_64(arr[0]),
      backgroundImageUrl: dco_decode_opt_String(arr[1]),
      birth: dco_decode_String(arr[2]),
      birthDay: dco_decode_String(arr[3]),
      birthYear: dco_decode_i_64(arr[4]),
      countryCode: dco_decode_String(arr[5]),
      gender: dco_decode_String(arr[6]),
      isPremium: dco_decode_bool(arr[7]),
      isUsingCustomProfileImage: dco_decode_bool(arr[8]),
      job: dco_decode_String(arr[9]),
      jobId: dco_decode_i_64(arr[10]),
      pawooUrl: dco_decode_opt_String(arr[11]),
      region: dco_decode_String(arr[12]),
      totalFollowUsers: dco_decode_i_64(arr[13]),
      totalIllustBookmarksPublic: dco_decode_i_64(arr[14]),
      totalIllustSeries: dco_decode_i_64(arr[15]),
      totalIllusts: dco_decode_i_64(arr[16]),
      totalManga: dco_decode_i_64(arr[17]),
      totalMypixivUsers: dco_decode_i_64(arr[18]),
      totalNovelSeries: dco_decode_i_64(arr[19]),
      totalNovels: dco_decode_i_64(arr[20]),
      twitterAccount: dco_decode_String(arr[21]),
      twitterUrl: dco_decode_opt_String(arr[22]),
      webpage: dco_decode_opt_String(arr[23]),
    );
  }

  @protected
  ProfileImageUrls dco_decode_profile_image_urls(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ProfileImageUrls(medium: dco_decode_String(arr[0]));
  }

  @protected
  ProfilePublicity dco_decode_profile_publicity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ProfilePublicity(
      birthDay: dco_decode_String(arr[0]),
      birthYear: dco_decode_String(arr[1]),
      gender: dco_decode_String(arr[2]),
      job: dco_decode_String(arr[3]),
      pawoo: dco_decode_bool(arr[4]),
      region: dco_decode_String(arr[5]),
    );
  }

  @protected
  Series dco_decode_series(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Series(
      id: dco_decode_i_64(arr[0]),
      title: dco_decode_String(arr[1]),
    );
  }

  @protected
  Tag dco_decode_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Tag(
      name: dco_decode_String(arr[0]),
      translatedName: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  TrendTag dco_decode_trend_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TrendTag(
      tag: dco_decode_String(arr[0]),
      translatedName: dco_decode_opt_String(arr[1]),
      illust: dco_decode_illust(arr[2]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UiAppendToDownload dco_decode_ui_append_to_download(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return UiAppendToDownload(
      illustId: dco_decode_i_64(arr[0]),
      illustTitle: dco_decode_String(arr[1]),
      illustType: dco_decode_String(arr[2]),
      imageIdx: dco_decode_i_64(arr[3]),
      squareMedium: dco_decode_String(arr[4]),
      medium: dco_decode_String(arr[5]),
      large: dco_decode_String(arr[6]),
      original: dco_decode_String(arr[7]),
    );
  }

  @protected
  UiDownloading dco_decode_ui_downloading(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return UiDownloading(
      hash: dco_decode_String(arr[0]),
      illustId: dco_decode_i_64(arr[1]),
      illustTitle: dco_decode_String(arr[2]),
      illustType: dco_decode_String(arr[3]),
      imageIdx: dco_decode_i_64(arr[4]),
      squareMedium: dco_decode_String(arr[5]),
      medium: dco_decode_String(arr[6]),
      large: dco_decode_String(arr[7]),
      original: dco_decode_String(arr[8]),
      downloadStatus: dco_decode_i_32(arr[9]),
      errorMsg: dco_decode_String(arr[10]),
    );
  }

  @protected
  UiIllustRankQuery dco_decode_ui_illust_rank_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiIllustRankQuery(
      mode: dco_decode_String(arr[0]),
      date: dco_decode_String(arr[1]),
    );
  }

  @protected
  UiIllustSearchQuery dco_decode_ui_illust_search_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiIllustSearchQuery(
      mode: dco_decode_String(arr[0]),
      word: dco_decode_String(arr[1]),
    );
  }

  @protected
  UiLoginByCodeQuery dco_decode_ui_login_by_code_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiLoginByCodeQuery(
      code: dco_decode_String(arr[0]),
      verify: dco_decode_String(arr[1]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  User dco_decode_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return User(
      account: dco_decode_String(arr[0]),
      comment: dco_decode_String(arr[1]),
      id: dco_decode_i_64(arr[2]),
      isAccessBlockingUser: dco_decode_bool(arr[3]),
      isFollowed: dco_decode_bool(arr[4]),
      name: dco_decode_String(arr[5]),
      profileImageUrls: dco_decode_profile_image_urls(arr[6]),
    );
  }

  @protected
  UserDetail dco_decode_user_detail(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UserDetail(
      profile: dco_decode_profile(arr[0]),
      profilePublicity: dco_decode_profile_publicity(arr[1]),
      user: dco_decode_user(arr[2]),
      workspace: dco_decode_workspace(arr[3]),
    );
  }

  @protected
  UserSample dco_decode_user_sample(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UserSample(
      id: dco_decode_i_64(arr[0]),
      name: dco_decode_String(arr[1]),
      account: dco_decode_String(arr[2]),
      profileImageUrls: dco_decode_profile_image_urls(arr[3]),
      isFollowed: dco_decode_bool(arr[4]),
    );
  }

  @protected
  Workspace dco_decode_workspace(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return Workspace(
      chair: dco_decode_String(arr[0]),
      comment: dco_decode_String(arr[1]),
      desk: dco_decode_String(arr[2]),
      desktop: dco_decode_String(arr[3]),
      monitor: dco_decode_String(arr[4]),
      mouse: dco_decode_String(arr[5]),
      music: dco_decode_String(arr[6]),
      pc: dco_decode_String(arr[7]),
      printer: dco_decode_String(arr[8]),
      scanner: dco_decode_String(arr[9]),
      tablet: dco_decode_String(arr[10]),
      tool: dco_decode_String(arr[11]),
      workspaceImageUrl: dco_decode_opt_String(arr[12]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Series sse_decode_box_autoadd_series(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_series(deserializer));
  }

  @protected
  UiIllustRankQuery sse_decode_box_autoadd_ui_illust_rank_query(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_illust_rank_query(deserializer));
  }

  @protected
  UiIllustSearchQuery sse_decode_box_autoadd_ui_illust_search_query(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_illust_search_query(deserializer));
  }

  @protected
  UiLoginByCodeQuery sse_decode_box_autoadd_ui_login_by_code_query(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_login_by_code_query(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Illust sse_decode_illust(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_illustType = sse_decode_String(deserializer);
    var var_imageUrls = sse_decode_main_image_urls(deserializer);
    var var_caption = sse_decode_String(deserializer);
    var var_restrict = sse_decode_i_64(deserializer);
    var var_user = sse_decode_user_sample(deserializer);
    var var_tags = sse_decode_list_tag(deserializer);
    var var_tools = sse_decode_list_String(deserializer);
    var var_createDate = sse_decode_String(deserializer);
    var var_pageCount = sse_decode_i_64(deserializer);
    var var_width = sse_decode_i_64(deserializer);
    var var_height = sse_decode_i_64(deserializer);
    var var_sanityLevel = sse_decode_i_64(deserializer);
    var var_xRestrict = sse_decode_i_64(deserializer);
    var var_series = sse_decode_opt_box_autoadd_series(deserializer);
    var var_metaSinglePage = sse_decode_meta_single_page(deserializer);
    var var_metaPages = sse_decode_list_meta_page(deserializer);
    var var_totalView = sse_decode_i_64(deserializer);
    var var_totalBookmarks = sse_decode_i_64(deserializer);
    var var_isBookmarked = sse_decode_bool(deserializer);
    var var_visible = sse_decode_bool(deserializer);
    var var_isMuted = sse_decode_bool(deserializer);
    return Illust(
      id: var_id,
      title: var_title,
      illustType: var_illustType,
      imageUrls: var_imageUrls,
      caption: var_caption,
      restrict: var_restrict,
      user: var_user,
      tags: var_tags,
      tools: var_tools,
      createDate: var_createDate,
      pageCount: var_pageCount,
      width: var_width,
      height: var_height,
      sanityLevel: var_sanityLevel,
      xRestrict: var_xRestrict,
      series: var_series,
      metaSinglePage: var_metaSinglePage,
      metaPages: var_metaPages,
      totalView: var_totalView,
      totalBookmarks: var_totalBookmarks,
      isBookmarked: var_isBookmarked,
      visible: var_visible,
      isMuted: var_isMuted,
    );
  }

  @protected
  IllustResponse sse_decode_illust_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_illusts = sse_decode_list_illust(deserializer);
    var var_nextUrl = sse_decode_String(deserializer);
    return IllustResponse(illusts: var_illusts, nextUrl: var_nextUrl);
  }

  @protected
  IllustTrendingTags sse_decode_illust_trending_tags(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_trendTags = sse_decode_list_trend_tag(deserializer);
    return IllustTrendingTags(trendTags: var_trendTags);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Illust> sse_decode_list_illust(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Illust>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_illust(deserializer));
    }
    return ans_;
  }

  @protected
  List<MetaPage> sse_decode_list_meta_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MetaPage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_meta_page(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Tag> sse_decode_list_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tag(deserializer));
    }
    return ans_;
  }

  @protected
  List<TrendTag> sse_decode_list_trend_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TrendTag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trend_tag(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiAppendToDownload> sse_decode_list_ui_append_to_download(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiAppendToDownload>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_append_to_download(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiDownloading> sse_decode_list_ui_downloading(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiDownloading>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_downloading(deserializer));
    }
    return ans_;
  }

  @protected
  LoginUrl sse_decode_login_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_verify = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    return LoginUrl(verify: var_verify, url: var_url);
  }

  @protected
  MainImageUrls sse_decode_main_image_urls(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_squareMedium = sse_decode_String(deserializer);
    var var_medium = sse_decode_String(deserializer);
    var var_large = sse_decode_String(deserializer);
    return MainImageUrls(
      squareMedium: var_squareMedium,
      medium: var_medium,
      large: var_large,
    );
  }

  @protected
  MetaPage sse_decode_meta_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_imageUrls = sse_decode_meta_page_image_urls(deserializer);
    return MetaPage(imageUrls: var_imageUrls);
  }

  @protected
  MetaPageImageUrls sse_decode_meta_page_image_urls(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_squareMedium = sse_decode_String(deserializer);
    var var_medium = sse_decode_String(deserializer);
    var var_large = sse_decode_String(deserializer);
    var var_original = sse_decode_String(deserializer);
    return MetaPageImageUrls(
      squareMedium: var_squareMedium,
      medium: var_medium,
      large: var_large,
      original: var_original,
    );
  }

  @protected
  MetaSinglePage sse_decode_meta_single_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_originalImageUrl = sse_decode_opt_String(deserializer);
    return MetaSinglePage(originalImageUrl: var_originalImageUrl);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Series? sse_decode_opt_box_autoadd_series(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_series(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Profile sse_decode_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_addressId = sse_decode_i_64(deserializer);
    var var_backgroundImageUrl = sse_decode_opt_String(deserializer);
    var var_birth = sse_decode_String(deserializer);
    var var_birthDay = sse_decode_String(deserializer);
    var var_birthYear = sse_decode_i_64(deserializer);
    var var_countryCode = sse_decode_String(deserializer);
    var var_gender = sse_decode_String(deserializer);
    var var_isPremium = sse_decode_bool(deserializer);
    var var_isUsingCustomProfileImage = sse_decode_bool(deserializer);
    var var_job = sse_decode_String(deserializer);
    var var_jobId = sse_decode_i_64(deserializer);
    var var_pawooUrl = sse_decode_opt_String(deserializer);
    var var_region = sse_decode_String(deserializer);
    var var_totalFollowUsers = sse_decode_i_64(deserializer);
    var var_totalIllustBookmarksPublic = sse_decode_i_64(deserializer);
    var var_totalIllustSeries = sse_decode_i_64(deserializer);
    var var_totalIllusts = sse_decode_i_64(deserializer);
    var var_totalManga = sse_decode_i_64(deserializer);
    var var_totalMypixivUsers = sse_decode_i_64(deserializer);
    var var_totalNovelSeries = sse_decode_i_64(deserializer);
    var var_totalNovels = sse_decode_i_64(deserializer);
    var var_twitterAccount = sse_decode_String(deserializer);
    var var_twitterUrl = sse_decode_opt_String(deserializer);
    var var_webpage = sse_decode_opt_String(deserializer);
    return Profile(
      addressId: var_addressId,
      backgroundImageUrl: var_backgroundImageUrl,
      birth: var_birth,
      birthDay: var_birthDay,
      birthYear: var_birthYear,
      countryCode: var_countryCode,
      gender: var_gender,
      isPremium: var_isPremium,
      isUsingCustomProfileImage: var_isUsingCustomProfileImage,
      job: var_job,
      jobId: var_jobId,
      pawooUrl: var_pawooUrl,
      region: var_region,
      totalFollowUsers: var_totalFollowUsers,
      totalIllustBookmarksPublic: var_totalIllustBookmarksPublic,
      totalIllustSeries: var_totalIllustSeries,
      totalIllusts: var_totalIllusts,
      totalManga: var_totalManga,
      totalMypixivUsers: var_totalMypixivUsers,
      totalNovelSeries: var_totalNovelSeries,
      totalNovels: var_totalNovels,
      twitterAccount: var_twitterAccount,
      twitterUrl: var_twitterUrl,
      webpage: var_webpage,
    );
  }

  @protected
  ProfileImageUrls sse_decode_profile_image_urls(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_medium = sse_decode_String(deserializer);
    return ProfileImageUrls(medium: var_medium);
  }

  @protected
  ProfilePublicity sse_decode_profile_publicity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_birthDay = sse_decode_String(deserializer);
    var var_birthYear = sse_decode_String(deserializer);
    var var_gender = sse_decode_String(deserializer);
    var var_job = sse_decode_String(deserializer);
    var var_pawoo = sse_decode_bool(deserializer);
    var var_region = sse_decode_String(deserializer);
    return ProfilePublicity(
      birthDay: var_birthDay,
      birthYear: var_birthYear,
      gender: var_gender,
      job: var_job,
      pawoo: var_pawoo,
      region: var_region,
    );
  }

  @protected
  Series sse_decode_series(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_title = sse_decode_String(deserializer);
    return Series(id: var_id, title: var_title);
  }

  @protected
  Tag sse_decode_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_translatedName = sse_decode_opt_String(deserializer);
    return Tag(name: var_name, translatedName: var_translatedName);
  }

  @protected
  TrendTag sse_decode_trend_tag(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tag = sse_decode_String(deserializer);
    var var_translatedName = sse_decode_opt_String(deserializer);
    var var_illust = sse_decode_illust(deserializer);
    return TrendTag(
      tag: var_tag,
      translatedName: var_translatedName,
      illust: var_illust,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  UiAppendToDownload sse_decode_ui_append_to_download(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_illustId = sse_decode_i_64(deserializer);
    var var_illustTitle = sse_decode_String(deserializer);
    var var_illustType = sse_decode_String(deserializer);
    var var_imageIdx = sse_decode_i_64(deserializer);
    var var_squareMedium = sse_decode_String(deserializer);
    var var_medium = sse_decode_String(deserializer);
    var var_large = sse_decode_String(deserializer);
    var var_original = sse_decode_String(deserializer);
    return UiAppendToDownload(
      illustId: var_illustId,
      illustTitle: var_illustTitle,
      illustType: var_illustType,
      imageIdx: var_imageIdx,
      squareMedium: var_squareMedium,
      medium: var_medium,
      large: var_large,
      original: var_original,
    );
  }

  @protected
  UiDownloading sse_decode_ui_downloading(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hash = sse_decode_String(deserializer);
    var var_illustId = sse_decode_i_64(deserializer);
    var var_illustTitle = sse_decode_String(deserializer);
    var var_illustType = sse_decode_String(deserializer);
    var var_imageIdx = sse_decode_i_64(deserializer);
    var var_squareMedium = sse_decode_String(deserializer);
    var var_medium = sse_decode_String(deserializer);
    var var_large = sse_decode_String(deserializer);
    var var_original = sse_decode_String(deserializer);
    var var_downloadStatus = sse_decode_i_32(deserializer);
    var var_errorMsg = sse_decode_String(deserializer);
    return UiDownloading(
      hash: var_hash,
      illustId: var_illustId,
      illustTitle: var_illustTitle,
      illustType: var_illustType,
      imageIdx: var_imageIdx,
      squareMedium: var_squareMedium,
      medium: var_medium,
      large: var_large,
      original: var_original,
      downloadStatus: var_downloadStatus,
      errorMsg: var_errorMsg,
    );
  }

  @protected
  UiIllustRankQuery sse_decode_ui_illust_rank_query(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mode = sse_decode_String(deserializer);
    var var_date = sse_decode_String(deserializer);
    return UiIllustRankQuery(mode: var_mode, date: var_date);
  }

  @protected
  UiIllustSearchQuery sse_decode_ui_illust_search_query(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mode = sse_decode_String(deserializer);
    var var_word = sse_decode_String(deserializer);
    return UiIllustSearchQuery(mode: var_mode, word: var_word);
  }

  @protected
  UiLoginByCodeQuery sse_decode_ui_login_by_code_query(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_String(deserializer);
    var var_verify = sse_decode_String(deserializer);
    return UiLoginByCodeQuery(code: var_code, verify: var_verify);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  User sse_decode_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_account = sse_decode_String(deserializer);
    var var_comment = sse_decode_String(deserializer);
    var var_id = sse_decode_i_64(deserializer);
    var var_isAccessBlockingUser = sse_decode_bool(deserializer);
    var var_isFollowed = sse_decode_bool(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_profileImageUrls = sse_decode_profile_image_urls(deserializer);
    return User(
      account: var_account,
      comment: var_comment,
      id: var_id,
      isAccessBlockingUser: var_isAccessBlockingUser,
      isFollowed: var_isFollowed,
      name: var_name,
      profileImageUrls: var_profileImageUrls,
    );
  }

  @protected
  UserDetail sse_decode_user_detail(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_profile = sse_decode_profile(deserializer);
    var var_profilePublicity = sse_decode_profile_publicity(deserializer);
    var var_user = sse_decode_user(deserializer);
    var var_workspace = sse_decode_workspace(deserializer);
    return UserDetail(
      profile: var_profile,
      profilePublicity: var_profilePublicity,
      user: var_user,
      workspace: var_workspace,
    );
  }

  @protected
  UserSample sse_decode_user_sample(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_account = sse_decode_String(deserializer);
    var var_profileImageUrls = sse_decode_profile_image_urls(deserializer);
    var var_isFollowed = sse_decode_bool(deserializer);
    return UserSample(
      id: var_id,
      name: var_name,
      account: var_account,
      profileImageUrls: var_profileImageUrls,
      isFollowed: var_isFollowed,
    );
  }

  @protected
  Workspace sse_decode_workspace(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chair = sse_decode_String(deserializer);
    var var_comment = sse_decode_String(deserializer);
    var var_desk = sse_decode_String(deserializer);
    var var_desktop = sse_decode_String(deserializer);
    var var_monitor = sse_decode_String(deserializer);
    var var_mouse = sse_decode_String(deserializer);
    var var_music = sse_decode_String(deserializer);
    var var_pc = sse_decode_String(deserializer);
    var var_printer = sse_decode_String(deserializer);
    var var_scanner = sse_decode_String(deserializer);
    var var_tablet = sse_decode_String(deserializer);
    var var_tool = sse_decode_String(deserializer);
    var var_workspaceImageUrl = sse_decode_opt_String(deserializer);
    return Workspace(
      chair: var_chair,
      comment: var_comment,
      desk: var_desk,
      desktop: var_desktop,
      monitor: var_monitor,
      mouse: var_mouse,
      music: var_music,
      pc: var_pc,
      printer: var_printer,
      scanner: var_scanner,
      tablet: var_tablet,
      tool: var_tool,
      workspaceImageUrl: var_workspaceImageUrl,
    );
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_series(Series self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_series(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_illust_rank_query(
    UiIllustRankQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_illust_rank_query(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_illust_search_query(
    UiIllustSearchQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_illust_search_query(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_login_by_code_query(
    UiLoginByCodeQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_login_by_code_query(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_illust(Illust self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.illustType, serializer);
    sse_encode_main_image_urls(self.imageUrls, serializer);
    sse_encode_String(self.caption, serializer);
    sse_encode_i_64(self.restrict, serializer);
    sse_encode_user_sample(self.user, serializer);
    sse_encode_list_tag(self.tags, serializer);
    sse_encode_list_String(self.tools, serializer);
    sse_encode_String(self.createDate, serializer);
    sse_encode_i_64(self.pageCount, serializer);
    sse_encode_i_64(self.width, serializer);
    sse_encode_i_64(self.height, serializer);
    sse_encode_i_64(self.sanityLevel, serializer);
    sse_encode_i_64(self.xRestrict, serializer);
    sse_encode_opt_box_autoadd_series(self.series, serializer);
    sse_encode_meta_single_page(self.metaSinglePage, serializer);
    sse_encode_list_meta_page(self.metaPages, serializer);
    sse_encode_i_64(self.totalView, serializer);
    sse_encode_i_64(self.totalBookmarks, serializer);
    sse_encode_bool(self.isBookmarked, serializer);
    sse_encode_bool(self.visible, serializer);
    sse_encode_bool(self.isMuted, serializer);
  }

  @protected
  void sse_encode_illust_response(
    IllustResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_illust(self.illusts, serializer);
    sse_encode_String(self.nextUrl, serializer);
  }

  @protected
  void sse_encode_illust_trending_tags(
    IllustTrendingTags self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_trend_tag(self.trendTags, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_illust(List<Illust> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_illust(item, serializer);
    }
  }

  @protected
  void sse_encode_list_meta_page(
    List<MetaPage> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_meta_page(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_tag(List<Tag> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tag(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trend_tag(
    List<TrendTag> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trend_tag(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_append_to_download(
    List<UiAppendToDownload> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_append_to_download(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_downloading(
    List<UiDownloading> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_downloading(item, serializer);
    }
  }

  @protected
  void sse_encode_login_url(LoginUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.verify, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_main_image_urls(
    MainImageUrls self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.squareMedium, serializer);
    sse_encode_String(self.medium, serializer);
    sse_encode_String(self.large, serializer);
  }

  @protected
  void sse_encode_meta_page(MetaPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_meta_page_image_urls(self.imageUrls, serializer);
  }

  @protected
  void sse_encode_meta_page_image_urls(
    MetaPageImageUrls self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.squareMedium, serializer);
    sse_encode_String(self.medium, serializer);
    sse_encode_String(self.large, serializer);
    sse_encode_String(self.original, serializer);
  }

  @protected
  void sse_encode_meta_single_page(
    MetaSinglePage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.originalImageUrl, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_series(
    Series? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_series(self, serializer);
    }
  }

  @protected
  void sse_encode_profile(Profile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.addressId, serializer);
    sse_encode_opt_String(self.backgroundImageUrl, serializer);
    sse_encode_String(self.birth, serializer);
    sse_encode_String(self.birthDay, serializer);
    sse_encode_i_64(self.birthYear, serializer);
    sse_encode_String(self.countryCode, serializer);
    sse_encode_String(self.gender, serializer);
    sse_encode_bool(self.isPremium, serializer);
    sse_encode_bool(self.isUsingCustomProfileImage, serializer);
    sse_encode_String(self.job, serializer);
    sse_encode_i_64(self.jobId, serializer);
    sse_encode_opt_String(self.pawooUrl, serializer);
    sse_encode_String(self.region, serializer);
    sse_encode_i_64(self.totalFollowUsers, serializer);
    sse_encode_i_64(self.totalIllustBookmarksPublic, serializer);
    sse_encode_i_64(self.totalIllustSeries, serializer);
    sse_encode_i_64(self.totalIllusts, serializer);
    sse_encode_i_64(self.totalManga, serializer);
    sse_encode_i_64(self.totalMypixivUsers, serializer);
    sse_encode_i_64(self.totalNovelSeries, serializer);
    sse_encode_i_64(self.totalNovels, serializer);
    sse_encode_String(self.twitterAccount, serializer);
    sse_encode_opt_String(self.twitterUrl, serializer);
    sse_encode_opt_String(self.webpage, serializer);
  }

  @protected
  void sse_encode_profile_image_urls(
    ProfileImageUrls self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.medium, serializer);
  }

  @protected
  void sse_encode_profile_publicity(
    ProfilePublicity self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.birthDay, serializer);
    sse_encode_String(self.birthYear, serializer);
    sse_encode_String(self.gender, serializer);
    sse_encode_String(self.job, serializer);
    sse_encode_bool(self.pawoo, serializer);
    sse_encode_String(self.region, serializer);
  }

  @protected
  void sse_encode_series(Series self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.title, serializer);
  }

  @protected
  void sse_encode_tag(Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.translatedName, serializer);
  }

  @protected
  void sse_encode_trend_tag(TrendTag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tag, serializer);
    sse_encode_opt_String(self.translatedName, serializer);
    sse_encode_illust(self.illust, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_ui_append_to_download(
    UiAppendToDownload self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.illustId, serializer);
    sse_encode_String(self.illustTitle, serializer);
    sse_encode_String(self.illustType, serializer);
    sse_encode_i_64(self.imageIdx, serializer);
    sse_encode_String(self.squareMedium, serializer);
    sse_encode_String(self.medium, serializer);
    sse_encode_String(self.large, serializer);
    sse_encode_String(self.original, serializer);
  }

  @protected
  void sse_encode_ui_downloading(UiDownloading self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hash, serializer);
    sse_encode_i_64(self.illustId, serializer);
    sse_encode_String(self.illustTitle, serializer);
    sse_encode_String(self.illustType, serializer);
    sse_encode_i_64(self.imageIdx, serializer);
    sse_encode_String(self.squareMedium, serializer);
    sse_encode_String(self.medium, serializer);
    sse_encode_String(self.large, serializer);
    sse_encode_String(self.original, serializer);
    sse_encode_i_32(self.downloadStatus, serializer);
    sse_encode_String(self.errorMsg, serializer);
  }

  @protected
  void sse_encode_ui_illust_rank_query(
    UiIllustRankQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mode, serializer);
    sse_encode_String(self.date, serializer);
  }

  @protected
  void sse_encode_ui_illust_search_query(
    UiIllustSearchQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mode, serializer);
    sse_encode_String(self.word, serializer);
  }

  @protected
  void sse_encode_ui_login_by_code_query(
    UiLoginByCodeQuery self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.code, serializer);
    sse_encode_String(self.verify, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user(User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.account, serializer);
    sse_encode_String(self.comment, serializer);
    sse_encode_i_64(self.id, serializer);
    sse_encode_bool(self.isAccessBlockingUser, serializer);
    sse_encode_bool(self.isFollowed, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_profile_image_urls(self.profileImageUrls, serializer);
  }

  @protected
  void sse_encode_user_detail(UserDetail self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_profile(self.profile, serializer);
    sse_encode_profile_publicity(self.profilePublicity, serializer);
    sse_encode_user(self.user, serializer);
    sse_encode_workspace(self.workspace, serializer);
  }

  @protected
  void sse_encode_user_sample(UserSample self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.account, serializer);
    sse_encode_profile_image_urls(self.profileImageUrls, serializer);
    sse_encode_bool(self.isFollowed, serializer);
  }

  @protected
  void sse_encode_workspace(Workspace self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.chair, serializer);
    sse_encode_String(self.comment, serializer);
    sse_encode_String(self.desk, serializer);
    sse_encode_String(self.desktop, serializer);
    sse_encode_String(self.monitor, serializer);
    sse_encode_String(self.mouse, serializer);
    sse_encode_String(self.music, serializer);
    sse_encode_String(self.pc, serializer);
    sse_encode_String(self.printer, serializer);
    sse_encode_String(self.scanner, serializer);
    sse_encode_String(self.tablet, serializer);
    sse_encode_String(self.tool, serializer);
    sse_encode_opt_String(self.workspaceImageUrl, serializer);
  }
}
