// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1403140338;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__api__append_to_download_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "append_to_download",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_values = <Vec<crate::udto::UiAppendToDownload>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::append_to_download(api_values)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__copy_image_to_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "copy_image_to",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_src_path = <String>::sse_decode(&mut deserializer);
            let api_to_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::copy_image_to(api_src_path, api_to_dir)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__create_login_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_login_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::api::create_login_url())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__create_register_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_register_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::create_register_url()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__desktop_root_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "desktop_root",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::desktop_root()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__downloading_list_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "downloading_list",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::downloading_list()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__downloads_to_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "downloads_to",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::downloads_to()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__get_in_china_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_in_china",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::api::get_in_china())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__simple__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::simple::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__api__illust_from_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "illust_from_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_url = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::illust_from_url(api_url)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__illust_rank_first_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "illust_rank_first_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <crate::udto::UiIllustRankQuery>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::illust_rank_first_url(api_query)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__illust_recommended_first_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "illust_recommended_first_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::illust_recommended_first_url()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__illust_search_first_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "illust_search_first_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <crate::udto::UiIllustSearchQuery>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::illust_search_first_url(api_query)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__illust_trending_tags_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "illust_trending_tags",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::illust_trending_tags()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__illust_trending_tags_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "illust_trending_tags_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::illust_trending_tags_url())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_root = <String>::sse_decode(&mut deserializer);
            let api_downloads_to = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::init(api_root, api_downloads_to)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__simple__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::simple::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__load_pixiv_image_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_pixiv_image",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_url = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::load_pixiv_image(api_url)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__load_property_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_property",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_k = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::load_property(api_k)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__login_by_code_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "login_by_code",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <crate::udto::UiLoginByCodeQuery>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::login_by_code(api_query)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__per_in_china_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "per_in_china",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::api::per_in_china();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__pre_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "pre_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::pre_login()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__recreate_downloads_to_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "recreate_downloads_to",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::recreate_downloads_to()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__request_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "request_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_params = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::request_url(api_params)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__reset_failed_downloads_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "reset_failed_downloads",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::reset_failed_downloads()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__save_property_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "save_property",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_k = <String>::sse_decode(&mut deserializer);
            let api_v = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::save_property(api_k, api_v)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__set_downloads_to_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_downloads_to",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_new_downloads_to = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::set_downloads_to(api_new_downloads_to)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__set_in_china_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_in_china",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::api::set_in_china(api_value);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__user_detail_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "user_detail",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_id = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::user_detail(api_user_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__api__user_illusts_first_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "user_illusts_first_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_id = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::api::user_illusts_first_url(api_user_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::pixirust::entities::Illust {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_illustType = <String>::sse_decode(deserializer);
        let mut var_imageUrls =
            <crate::pixirust::entities::MainImageUrls>::sse_decode(deserializer);
        let mut var_caption = <String>::sse_decode(deserializer);
        let mut var_restrict = <i64>::sse_decode(deserializer);
        let mut var_user = <crate::pixirust::entities::UserSample>::sse_decode(deserializer);
        let mut var_tags = <Vec<crate::pixirust::entities::Tag>>::sse_decode(deserializer);
        let mut var_tools = <Vec<String>>::sse_decode(deserializer);
        let mut var_createDate = <String>::sse_decode(deserializer);
        let mut var_pageCount = <i64>::sse_decode(deserializer);
        let mut var_width = <i64>::sse_decode(deserializer);
        let mut var_height = <i64>::sse_decode(deserializer);
        let mut var_sanityLevel = <i64>::sse_decode(deserializer);
        let mut var_xRestrict = <i64>::sse_decode(deserializer);
        let mut var_series = <Option<crate::pixirust::entities::Series>>::sse_decode(deserializer);
        let mut var_metaSinglePage =
            <crate::pixirust::entities::MetaSinglePage>::sse_decode(deserializer);
        let mut var_metaPages =
            <Vec<crate::pixirust::entities::MetaPage>>::sse_decode(deserializer);
        let mut var_totalView = <i64>::sse_decode(deserializer);
        let mut var_totalBookmarks = <i64>::sse_decode(deserializer);
        let mut var_isBookmarked = <bool>::sse_decode(deserializer);
        let mut var_visible = <bool>::sse_decode(deserializer);
        let mut var_isMuted = <bool>::sse_decode(deserializer);
        return crate::pixirust::entities::Illust {
            id: var_id,
            title: var_title,
            illust_type: var_illustType,
            image_urls: var_imageUrls,
            caption: var_caption,
            restrict: var_restrict,
            user: var_user,
            tags: var_tags,
            tools: var_tools,
            create_date: var_createDate,
            page_count: var_pageCount,
            width: var_width,
            height: var_height,
            sanity_level: var_sanityLevel,
            x_restrict: var_xRestrict,
            series: var_series,
            meta_single_page: var_metaSinglePage,
            meta_pages: var_metaPages,
            total_view: var_totalView,
            total_bookmarks: var_totalBookmarks,
            is_bookmarked: var_isBookmarked,
            visible: var_visible,
            is_muted: var_isMuted,
        };
    }
}

impl SseDecode for crate::pixirust::entities::IllustResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_illusts = <Vec<crate::pixirust::entities::Illust>>::sse_decode(deserializer);
        let mut var_nextUrl = <String>::sse_decode(deserializer);
        return crate::pixirust::entities::IllustResponse {
            illusts: var_illusts,
            next_url: var_nextUrl,
        };
    }
}

impl SseDecode for crate::pixirust::entities::IllustTrendingTags {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_trendTags =
            <Vec<crate::pixirust::entities::TrendTag>>::sse_decode(deserializer);
        return crate::pixirust::entities::IllustTrendingTags {
            trend_tags: var_trendTags,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::pixirust::entities::Illust> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::pixirust::entities::Illust>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::pixirust::entities::MetaPage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::pixirust::entities::MetaPage>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::pixirust::entities::Tag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::pixirust::entities::Tag>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::pixirust::entities::TrendTag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::pixirust::entities::TrendTag>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::udto::UiAppendToDownload> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::udto::UiAppendToDownload>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::udto::UiDownloading> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::udto::UiDownloading>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::pixirust::entities::LoginUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_verify = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::pixirust::entities::LoginUrl {
            verify: var_verify,
            url: var_url,
        };
    }
}

impl SseDecode for crate::pixirust::entities::MainImageUrls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_squareMedium = <String>::sse_decode(deserializer);
        let mut var_medium = <String>::sse_decode(deserializer);
        let mut var_large = <String>::sse_decode(deserializer);
        return crate::pixirust::entities::MainImageUrls {
            square_medium: var_squareMedium,
            medium: var_medium,
            large: var_large,
        };
    }
}

impl SseDecode for crate::pixirust::entities::MetaPage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_imageUrls =
            <crate::pixirust::entities::MetaPageImageUrls>::sse_decode(deserializer);
        return crate::pixirust::entities::MetaPage {
            image_urls: var_imageUrls,
        };
    }
}

impl SseDecode for crate::pixirust::entities::MetaPageImageUrls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_squareMedium = <String>::sse_decode(deserializer);
        let mut var_medium = <String>::sse_decode(deserializer);
        let mut var_large = <String>::sse_decode(deserializer);
        let mut var_original = <String>::sse_decode(deserializer);
        return crate::pixirust::entities::MetaPageImageUrls {
            square_medium: var_squareMedium,
            medium: var_medium,
            large: var_large,
            original: var_original,
        };
    }
}

impl SseDecode for crate::pixirust::entities::MetaSinglePage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_originalImageUrl = <Option<String>>::sse_decode(deserializer);
        return crate::pixirust::entities::MetaSinglePage {
            original_image_url: var_originalImageUrl,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::pixirust::entities::Series> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::pixirust::entities::Series>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::pixirust::entities::Profile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_addressId = <i64>::sse_decode(deserializer);
        let mut var_backgroundImageUrl = <Option<String>>::sse_decode(deserializer);
        let mut var_birth = <String>::sse_decode(deserializer);
        let mut var_birthDay = <String>::sse_decode(deserializer);
        let mut var_birthYear = <i64>::sse_decode(deserializer);
        let mut var_countryCode = <String>::sse_decode(deserializer);
        let mut var_gender = <String>::sse_decode(deserializer);
        let mut var_isPremium = <bool>::sse_decode(deserializer);
        let mut var_isUsingCustomProfileImage = <bool>::sse_decode(deserializer);
        let mut var_job = <String>::sse_decode(deserializer);
        let mut var_jobId = <i64>::sse_decode(deserializer);
        let mut var_pawooUrl = <Option<String>>::sse_decode(deserializer);
        let mut var_region = <String>::sse_decode(deserializer);
        let mut var_totalFollowUsers = <i64>::sse_decode(deserializer);
        let mut var_totalIllustBookmarksPublic = <i64>::sse_decode(deserializer);
        let mut var_totalIllustSeries = <i64>::sse_decode(deserializer);
        let mut var_totalIllusts = <i64>::sse_decode(deserializer);
        let mut var_totalManga = <i64>::sse_decode(deserializer);
        let mut var_totalMypixivUsers = <i64>::sse_decode(deserializer);
        let mut var_totalNovelSeries = <i64>::sse_decode(deserializer);
        let mut var_totalNovels = <i64>::sse_decode(deserializer);
        let mut var_twitterAccount = <String>::sse_decode(deserializer);
        let mut var_twitterUrl = <Option<String>>::sse_decode(deserializer);
        let mut var_webpage = <Option<String>>::sse_decode(deserializer);
        return crate::pixirust::entities::Profile {
            address_id: var_addressId,
            background_image_url: var_backgroundImageUrl,
            birth: var_birth,
            birth_day: var_birthDay,
            birth_year: var_birthYear,
            country_code: var_countryCode,
            gender: var_gender,
            is_premium: var_isPremium,
            is_using_custom_profile_image: var_isUsingCustomProfileImage,
            job: var_job,
            job_id: var_jobId,
            pawoo_url: var_pawooUrl,
            region: var_region,
            total_follow_users: var_totalFollowUsers,
            total_illust_bookmarks_public: var_totalIllustBookmarksPublic,
            total_illust_series: var_totalIllustSeries,
            total_illusts: var_totalIllusts,
            total_manga: var_totalManga,
            total_mypixiv_users: var_totalMypixivUsers,
            total_novel_series: var_totalNovelSeries,
            total_novels: var_totalNovels,
            twitter_account: var_twitterAccount,
            twitter_url: var_twitterUrl,
            webpage: var_webpage,
        };
    }
}

impl SseDecode for crate::pixirust::entities::ProfileImageUrls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_medium = <String>::sse_decode(deserializer);
        return crate::pixirust::entities::ProfileImageUrls { medium: var_medium };
    }
}

impl SseDecode for crate::pixirust::entities::ProfilePublicity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_birthDay = <String>::sse_decode(deserializer);
        let mut var_birthYear = <String>::sse_decode(deserializer);
        let mut var_gender = <String>::sse_decode(deserializer);
        let mut var_job = <String>::sse_decode(deserializer);
        let mut var_pawoo = <bool>::sse_decode(deserializer);
        let mut var_region = <String>::sse_decode(deserializer);
        return crate::pixirust::entities::ProfilePublicity {
            birth_day: var_birthDay,
            birth_year: var_birthYear,
            gender: var_gender,
            job: var_job,
            pawoo: var_pawoo,
            region: var_region,
        };
    }
}

impl SseDecode for crate::pixirust::entities::Series {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        return crate::pixirust::entities::Series {
            id: var_id,
            title: var_title,
        };
    }
}

impl SseDecode for crate::pixirust::entities::Tag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_translatedName = <Option<String>>::sse_decode(deserializer);
        return crate::pixirust::entities::Tag {
            name: var_name,
            translated_name: var_translatedName,
        };
    }
}

impl SseDecode for crate::pixirust::entities::TrendTag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_translatedName = <Option<String>>::sse_decode(deserializer);
        let mut var_illust = <crate::pixirust::entities::Illust>::sse_decode(deserializer);
        return crate::pixirust::entities::TrendTag {
            tag: var_tag,
            translated_name: var_translatedName,
            illust: var_illust,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for crate::udto::UiAppendToDownload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_illustId = <i64>::sse_decode(deserializer);
        let mut var_illustTitle = <String>::sse_decode(deserializer);
        let mut var_illustType = <String>::sse_decode(deserializer);
        let mut var_imageIdx = <i64>::sse_decode(deserializer);
        let mut var_squareMedium = <String>::sse_decode(deserializer);
        let mut var_medium = <String>::sse_decode(deserializer);
        let mut var_large = <String>::sse_decode(deserializer);
        let mut var_original = <String>::sse_decode(deserializer);
        return crate::udto::UiAppendToDownload {
            illust_id: var_illustId,
            illust_title: var_illustTitle,
            illust_type: var_illustType,
            image_idx: var_imageIdx,
            square_medium: var_squareMedium,
            medium: var_medium,
            large: var_large,
            original: var_original,
        };
    }
}

impl SseDecode for crate::udto::UiDownloading {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hash = <String>::sse_decode(deserializer);
        let mut var_illustId = <i64>::sse_decode(deserializer);
        let mut var_illustTitle = <String>::sse_decode(deserializer);
        let mut var_illustType = <String>::sse_decode(deserializer);
        let mut var_imageIdx = <i64>::sse_decode(deserializer);
        let mut var_squareMedium = <String>::sse_decode(deserializer);
        let mut var_medium = <String>::sse_decode(deserializer);
        let mut var_large = <String>::sse_decode(deserializer);
        let mut var_original = <String>::sse_decode(deserializer);
        let mut var_downloadStatus = <i32>::sse_decode(deserializer);
        let mut var_errorMsg = <String>::sse_decode(deserializer);
        return crate::udto::UiDownloading {
            hash: var_hash,
            illust_id: var_illustId,
            illust_title: var_illustTitle,
            illust_type: var_illustType,
            image_idx: var_imageIdx,
            square_medium: var_squareMedium,
            medium: var_medium,
            large: var_large,
            original: var_original,
            download_status: var_downloadStatus,
            error_msg: var_errorMsg,
        };
    }
}

impl SseDecode for crate::udto::UiIllustRankQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_mode = <String>::sse_decode(deserializer);
        let mut var_date = <String>::sse_decode(deserializer);
        return crate::udto::UiIllustRankQuery {
            mode: var_mode,
            date: var_date,
        };
    }
}

impl SseDecode for crate::udto::UiIllustSearchQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_mode = <String>::sse_decode(deserializer);
        let mut var_word = <String>::sse_decode(deserializer);
        return crate::udto::UiIllustSearchQuery {
            mode: var_mode,
            word: var_word,
        };
    }
}

impl SseDecode for crate::udto::UiLoginByCodeQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_code = <String>::sse_decode(deserializer);
        let mut var_verify = <String>::sse_decode(deserializer);
        return crate::udto::UiLoginByCodeQuery {
            code: var_code,
            verify: var_verify,
        };
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::pixirust::entities::User {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_account = <String>::sse_decode(deserializer);
        let mut var_comment = <String>::sse_decode(deserializer);
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_isAccessBlockingUser = <bool>::sse_decode(deserializer);
        let mut var_isFollowed = <bool>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_profileImageUrls =
            <crate::pixirust::entities::ProfileImageUrls>::sse_decode(deserializer);
        return crate::pixirust::entities::User {
            account: var_account,
            comment: var_comment,
            id: var_id,
            is_access_blocking_user: var_isAccessBlockingUser,
            is_followed: var_isFollowed,
            name: var_name,
            profile_image_urls: var_profileImageUrls,
        };
    }
}

impl SseDecode for crate::pixirust::entities::UserDetail {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_profile = <crate::pixirust::entities::Profile>::sse_decode(deserializer);
        let mut var_profilePublicity =
            <crate::pixirust::entities::ProfilePublicity>::sse_decode(deserializer);
        let mut var_user = <crate::pixirust::entities::User>::sse_decode(deserializer);
        let mut var_workspace = <crate::pixirust::entities::Workspace>::sse_decode(deserializer);
        return crate::pixirust::entities::UserDetail {
            profile: var_profile,
            profile_publicity: var_profilePublicity,
            user: var_user,
            workspace: var_workspace,
        };
    }
}

impl SseDecode for crate::pixirust::entities::UserSample {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_account = <String>::sse_decode(deserializer);
        let mut var_profileImageUrls =
            <crate::pixirust::entities::ProfileImageUrls>::sse_decode(deserializer);
        let mut var_isFollowed = <bool>::sse_decode(deserializer);
        return crate::pixirust::entities::UserSample {
            id: var_id,
            name: var_name,
            account: var_account,
            profile_image_urls: var_profileImageUrls,
            is_followed: var_isFollowed,
        };
    }
}

impl SseDecode for crate::pixirust::entities::Workspace {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_chair = <String>::sse_decode(deserializer);
        let mut var_comment = <String>::sse_decode(deserializer);
        let mut var_desk = <String>::sse_decode(deserializer);
        let mut var_desktop = <String>::sse_decode(deserializer);
        let mut var_monitor = <String>::sse_decode(deserializer);
        let mut var_mouse = <String>::sse_decode(deserializer);
        let mut var_music = <String>::sse_decode(deserializer);
        let mut var_pc = <String>::sse_decode(deserializer);
        let mut var_printer = <String>::sse_decode(deserializer);
        let mut var_scanner = <String>::sse_decode(deserializer);
        let mut var_tablet = <String>::sse_decode(deserializer);
        let mut var_tool = <String>::sse_decode(deserializer);
        let mut var_workspaceImageUrl = <Option<String>>::sse_decode(deserializer);
        return crate::pixirust::entities::Workspace {
            chair: var_chair,
            comment: var_comment,
            desk: var_desk,
            desktop: var_desktop,
            monitor: var_monitor,
            mouse: var_mouse,
            music: var_music,
            pc: var_pc,
            printer: var_printer,
            scanner: var_scanner,
            tablet: var_tablet,
            tool: var_tool,
            workspace_image_url: var_workspaceImageUrl,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__api__append_to_download_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__api__copy_image_to_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__api__create_login_url_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__api__create_register_url_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__api__desktop_root_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__api__downloading_list_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__api__downloads_to_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__api__get_in_china_impl(port, ptr, rust_vec_len, data_len),
        10 => wire__crate__api__api__illust_from_url_impl(port, ptr, rust_vec_len, data_len),
        11 => wire__crate__api__api__illust_rank_first_url_impl(port, ptr, rust_vec_len, data_len),
        12 => wire__crate__api__api__illust_recommended_first_url_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => {
            wire__crate__api__api__illust_search_first_url_impl(port, ptr, rust_vec_len, data_len)
        }
        14 => wire__crate__api__api__illust_trending_tags_impl(port, ptr, rust_vec_len, data_len),
        15 => {
            wire__crate__api__api__illust_trending_tags_url_impl(port, ptr, rust_vec_len, data_len)
        }
        16 => wire__crate__api__api__init_impl(port, ptr, rust_vec_len, data_len),
        17 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),
        18 => wire__crate__api__api__load_pixiv_image_impl(port, ptr, rust_vec_len, data_len),
        19 => wire__crate__api__api__load_property_impl(port, ptr, rust_vec_len, data_len),
        20 => wire__crate__api__api__login_by_code_impl(port, ptr, rust_vec_len, data_len),
        21 => wire__crate__api__api__per_in_china_impl(port, ptr, rust_vec_len, data_len),
        22 => wire__crate__api__api__pre_login_impl(port, ptr, rust_vec_len, data_len),
        23 => wire__crate__api__api__recreate_downloads_to_impl(port, ptr, rust_vec_len, data_len),
        24 => wire__crate__api__api__request_url_impl(port, ptr, rust_vec_len, data_len),
        25 => wire__crate__api__api__reset_failed_downloads_impl(port, ptr, rust_vec_len, data_len),
        26 => wire__crate__api__api__save_property_impl(port, ptr, rust_vec_len, data_len),
        27 => wire__crate__api__api__set_downloads_to_impl(port, ptr, rust_vec_len, data_len),
        28 => wire__crate__api__api__set_in_china_impl(port, ptr, rust_vec_len, data_len),
        29 => wire__crate__api__api__user_detail_impl(port, ptr, rust_vec_len, data_len),
        30 => wire__crate__api__api__user_illusts_first_url_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        9 => wire__crate__api__simple__greet_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::Illust {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.illust_type.into_into_dart().into_dart(),
            self.image_urls.into_into_dart().into_dart(),
            self.caption.into_into_dart().into_dart(),
            self.restrict.into_into_dart().into_dart(),
            self.user.into_into_dart().into_dart(),
            self.tags.into_into_dart().into_dart(),
            self.tools.into_into_dart().into_dart(),
            self.create_date.into_into_dart().into_dart(),
            self.page_count.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.sanity_level.into_into_dart().into_dart(),
            self.x_restrict.into_into_dart().into_dart(),
            self.series.into_into_dart().into_dart(),
            self.meta_single_page.into_into_dart().into_dart(),
            self.meta_pages.into_into_dart().into_dart(),
            self.total_view.into_into_dart().into_dart(),
            self.total_bookmarks.into_into_dart().into_dart(),
            self.is_bookmarked.into_into_dart().into_dart(),
            self.visible.into_into_dart().into_dart(),
            self.is_muted.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::Illust
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::Illust>
    for crate::pixirust::entities::Illust
{
    fn into_into_dart(self) -> crate::pixirust::entities::Illust {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::IllustResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.illusts.into_into_dart().into_dart(),
            self.next_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::IllustResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::IllustResponse>
    for crate::pixirust::entities::IllustResponse
{
    fn into_into_dart(self) -> crate::pixirust::entities::IllustResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::IllustTrendingTags {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.trend_tags.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::IllustTrendingTags
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::IllustTrendingTags>
    for crate::pixirust::entities::IllustTrendingTags
{
    fn into_into_dart(self) -> crate::pixirust::entities::IllustTrendingTags {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::LoginUrl {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.verify.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::LoginUrl
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::LoginUrl>
    for crate::pixirust::entities::LoginUrl
{
    fn into_into_dart(self) -> crate::pixirust::entities::LoginUrl {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::MainImageUrls {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.square_medium.into_into_dart().into_dart(),
            self.medium.into_into_dart().into_dart(),
            self.large.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::MainImageUrls
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::MainImageUrls>
    for crate::pixirust::entities::MainImageUrls
{
    fn into_into_dart(self) -> crate::pixirust::entities::MainImageUrls {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::MetaPage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.image_urls.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::MetaPage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::MetaPage>
    for crate::pixirust::entities::MetaPage
{
    fn into_into_dart(self) -> crate::pixirust::entities::MetaPage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::MetaPageImageUrls {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.square_medium.into_into_dart().into_dart(),
            self.medium.into_into_dart().into_dart(),
            self.large.into_into_dart().into_dart(),
            self.original.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::MetaPageImageUrls
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::MetaPageImageUrls>
    for crate::pixirust::entities::MetaPageImageUrls
{
    fn into_into_dart(self) -> crate::pixirust::entities::MetaPageImageUrls {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::MetaSinglePage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.original_image_url.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::MetaSinglePage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::MetaSinglePage>
    for crate::pixirust::entities::MetaSinglePage
{
    fn into_into_dart(self) -> crate::pixirust::entities::MetaSinglePage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::Profile {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address_id.into_into_dart().into_dart(),
            self.background_image_url.into_into_dart().into_dart(),
            self.birth.into_into_dart().into_dart(),
            self.birth_day.into_into_dart().into_dart(),
            self.birth_year.into_into_dart().into_dart(),
            self.country_code.into_into_dart().into_dart(),
            self.gender.into_into_dart().into_dart(),
            self.is_premium.into_into_dart().into_dart(),
            self.is_using_custom_profile_image
                .into_into_dart()
                .into_dart(),
            self.job.into_into_dart().into_dart(),
            self.job_id.into_into_dart().into_dart(),
            self.pawoo_url.into_into_dart().into_dart(),
            self.region.into_into_dart().into_dart(),
            self.total_follow_users.into_into_dart().into_dart(),
            self.total_illust_bookmarks_public
                .into_into_dart()
                .into_dart(),
            self.total_illust_series.into_into_dart().into_dart(),
            self.total_illusts.into_into_dart().into_dart(),
            self.total_manga.into_into_dart().into_dart(),
            self.total_mypixiv_users.into_into_dart().into_dart(),
            self.total_novel_series.into_into_dart().into_dart(),
            self.total_novels.into_into_dart().into_dart(),
            self.twitter_account.into_into_dart().into_dart(),
            self.twitter_url.into_into_dart().into_dart(),
            self.webpage.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::Profile
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::Profile>
    for crate::pixirust::entities::Profile
{
    fn into_into_dart(self) -> crate::pixirust::entities::Profile {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::ProfileImageUrls {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.medium.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::ProfileImageUrls
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::ProfileImageUrls>
    for crate::pixirust::entities::ProfileImageUrls
{
    fn into_into_dart(self) -> crate::pixirust::entities::ProfileImageUrls {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::ProfilePublicity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.birth_day.into_into_dart().into_dart(),
            self.birth_year.into_into_dart().into_dart(),
            self.gender.into_into_dart().into_dart(),
            self.job.into_into_dart().into_dart(),
            self.pawoo.into_into_dart().into_dart(),
            self.region.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::ProfilePublicity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::ProfilePublicity>
    for crate::pixirust::entities::ProfilePublicity
{
    fn into_into_dart(self) -> crate::pixirust::entities::ProfilePublicity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::Series {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::Series
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::Series>
    for crate::pixirust::entities::Series
{
    fn into_into_dart(self) -> crate::pixirust::entities::Series {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::Tag {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.translated_name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::Tag
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::Tag>
    for crate::pixirust::entities::Tag
{
    fn into_into_dart(self) -> crate::pixirust::entities::Tag {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::TrendTag {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.translated_name.into_into_dart().into_dart(),
            self.illust.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::TrendTag
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::TrendTag>
    for crate::pixirust::entities::TrendTag
{
    fn into_into_dart(self) -> crate::pixirust::entities::TrendTag {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::udto::UiAppendToDownload {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.illust_id.into_into_dart().into_dart(),
            self.illust_title.into_into_dart().into_dart(),
            self.illust_type.into_into_dart().into_dart(),
            self.image_idx.into_into_dart().into_dart(),
            self.square_medium.into_into_dart().into_dart(),
            self.medium.into_into_dart().into_dart(),
            self.large.into_into_dart().into_dart(),
            self.original.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::udto::UiAppendToDownload
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::udto::UiAppendToDownload>
    for crate::udto::UiAppendToDownload
{
    fn into_into_dart(self) -> crate::udto::UiAppendToDownload {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::udto::UiDownloading {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.hash.into_into_dart().into_dart(),
            self.illust_id.into_into_dart().into_dart(),
            self.illust_title.into_into_dart().into_dart(),
            self.illust_type.into_into_dart().into_dart(),
            self.image_idx.into_into_dart().into_dart(),
            self.square_medium.into_into_dart().into_dart(),
            self.medium.into_into_dart().into_dart(),
            self.large.into_into_dart().into_dart(),
            self.original.into_into_dart().into_dart(),
            self.download_status.into_into_dart().into_dart(),
            self.error_msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::udto::UiDownloading {}
impl flutter_rust_bridge::IntoIntoDart<crate::udto::UiDownloading> for crate::udto::UiDownloading {
    fn into_into_dart(self) -> crate::udto::UiDownloading {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::udto::UiIllustRankQuery {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.mode.into_into_dart().into_dart(),
            self.date.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::udto::UiIllustRankQuery
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::udto::UiIllustRankQuery>
    for crate::udto::UiIllustRankQuery
{
    fn into_into_dart(self) -> crate::udto::UiIllustRankQuery {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::udto::UiIllustSearchQuery {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.mode.into_into_dart().into_dart(),
            self.word.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::udto::UiIllustSearchQuery
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::udto::UiIllustSearchQuery>
    for crate::udto::UiIllustSearchQuery
{
    fn into_into_dart(self) -> crate::udto::UiIllustSearchQuery {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::udto::UiLoginByCodeQuery {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.code.into_into_dart().into_dart(),
            self.verify.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::udto::UiLoginByCodeQuery
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::udto::UiLoginByCodeQuery>
    for crate::udto::UiLoginByCodeQuery
{
    fn into_into_dart(self) -> crate::udto::UiLoginByCodeQuery {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::User {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.account.into_into_dart().into_dart(),
            self.comment.into_into_dart().into_dart(),
            self.id.into_into_dart().into_dart(),
            self.is_access_blocking_user.into_into_dart().into_dart(),
            self.is_followed.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.profile_image_urls.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::User
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::User>
    for crate::pixirust::entities::User
{
    fn into_into_dart(self) -> crate::pixirust::entities::User {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::UserDetail {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.profile.into_into_dart().into_dart(),
            self.profile_publicity.into_into_dart().into_dart(),
            self.user.into_into_dart().into_dart(),
            self.workspace.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::UserDetail
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::UserDetail>
    for crate::pixirust::entities::UserDetail
{
    fn into_into_dart(self) -> crate::pixirust::entities::UserDetail {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::UserSample {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.account.into_into_dart().into_dart(),
            self.profile_image_urls.into_into_dart().into_dart(),
            self.is_followed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::UserSample
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::UserSample>
    for crate::pixirust::entities::UserSample
{
    fn into_into_dart(self) -> crate::pixirust::entities::UserSample {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::pixirust::entities::Workspace {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.chair.into_into_dart().into_dart(),
            self.comment.into_into_dart().into_dart(),
            self.desk.into_into_dart().into_dart(),
            self.desktop.into_into_dart().into_dart(),
            self.monitor.into_into_dart().into_dart(),
            self.mouse.into_into_dart().into_dart(),
            self.music.into_into_dart().into_dart(),
            self.pc.into_into_dart().into_dart(),
            self.printer.into_into_dart().into_dart(),
            self.scanner.into_into_dart().into_dart(),
            self.tablet.into_into_dart().into_dart(),
            self.tool.into_into_dart().into_dart(),
            self.workspace_image_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::pixirust::entities::Workspace
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::pixirust::entities::Workspace>
    for crate::pixirust::entities::Workspace
{
    fn into_into_dart(self) -> crate::pixirust::entities::Workspace {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::pixirust::entities::Illust {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.illust_type, serializer);
        <crate::pixirust::entities::MainImageUrls>::sse_encode(self.image_urls, serializer);
        <String>::sse_encode(self.caption, serializer);
        <i64>::sse_encode(self.restrict, serializer);
        <crate::pixirust::entities::UserSample>::sse_encode(self.user, serializer);
        <Vec<crate::pixirust::entities::Tag>>::sse_encode(self.tags, serializer);
        <Vec<String>>::sse_encode(self.tools, serializer);
        <String>::sse_encode(self.create_date, serializer);
        <i64>::sse_encode(self.page_count, serializer);
        <i64>::sse_encode(self.width, serializer);
        <i64>::sse_encode(self.height, serializer);
        <i64>::sse_encode(self.sanity_level, serializer);
        <i64>::sse_encode(self.x_restrict, serializer);
        <Option<crate::pixirust::entities::Series>>::sse_encode(self.series, serializer);
        <crate::pixirust::entities::MetaSinglePage>::sse_encode(self.meta_single_page, serializer);
        <Vec<crate::pixirust::entities::MetaPage>>::sse_encode(self.meta_pages, serializer);
        <i64>::sse_encode(self.total_view, serializer);
        <i64>::sse_encode(self.total_bookmarks, serializer);
        <bool>::sse_encode(self.is_bookmarked, serializer);
        <bool>::sse_encode(self.visible, serializer);
        <bool>::sse_encode(self.is_muted, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::IllustResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::pixirust::entities::Illust>>::sse_encode(self.illusts, serializer);
        <String>::sse_encode(self.next_url, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::IllustTrendingTags {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::pixirust::entities::TrendTag>>::sse_encode(self.trend_tags, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::pixirust::entities::Illust> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::pixirust::entities::Illust>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::pixirust::entities::MetaPage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::pixirust::entities::MetaPage>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::pixirust::entities::Tag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::pixirust::entities::Tag>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::pixirust::entities::TrendTag> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::pixirust::entities::TrendTag>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::udto::UiAppendToDownload> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::udto::UiAppendToDownload>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::udto::UiDownloading> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::udto::UiDownloading>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::pixirust::entities::LoginUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.verify, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::MainImageUrls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.square_medium, serializer);
        <String>::sse_encode(self.medium, serializer);
        <String>::sse_encode(self.large, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::MetaPage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::pixirust::entities::MetaPageImageUrls>::sse_encode(self.image_urls, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::MetaPageImageUrls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.square_medium, serializer);
        <String>::sse_encode(self.medium, serializer);
        <String>::sse_encode(self.large, serializer);
        <String>::sse_encode(self.original, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::MetaSinglePage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.original_image_url, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::pixirust::entities::Series> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::pixirust::entities::Series>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::pixirust::entities::Profile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.address_id, serializer);
        <Option<String>>::sse_encode(self.background_image_url, serializer);
        <String>::sse_encode(self.birth, serializer);
        <String>::sse_encode(self.birth_day, serializer);
        <i64>::sse_encode(self.birth_year, serializer);
        <String>::sse_encode(self.country_code, serializer);
        <String>::sse_encode(self.gender, serializer);
        <bool>::sse_encode(self.is_premium, serializer);
        <bool>::sse_encode(self.is_using_custom_profile_image, serializer);
        <String>::sse_encode(self.job, serializer);
        <i64>::sse_encode(self.job_id, serializer);
        <Option<String>>::sse_encode(self.pawoo_url, serializer);
        <String>::sse_encode(self.region, serializer);
        <i64>::sse_encode(self.total_follow_users, serializer);
        <i64>::sse_encode(self.total_illust_bookmarks_public, serializer);
        <i64>::sse_encode(self.total_illust_series, serializer);
        <i64>::sse_encode(self.total_illusts, serializer);
        <i64>::sse_encode(self.total_manga, serializer);
        <i64>::sse_encode(self.total_mypixiv_users, serializer);
        <i64>::sse_encode(self.total_novel_series, serializer);
        <i64>::sse_encode(self.total_novels, serializer);
        <String>::sse_encode(self.twitter_account, serializer);
        <Option<String>>::sse_encode(self.twitter_url, serializer);
        <Option<String>>::sse_encode(self.webpage, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::ProfileImageUrls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.medium, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::ProfilePublicity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.birth_day, serializer);
        <String>::sse_encode(self.birth_year, serializer);
        <String>::sse_encode(self.gender, serializer);
        <String>::sse_encode(self.job, serializer);
        <bool>::sse_encode(self.pawoo, serializer);
        <String>::sse_encode(self.region, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::Series {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::Tag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.translated_name, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::TrendTag {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.translated_name, serializer);
        <crate::pixirust::entities::Illust>::sse_encode(self.illust, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for crate::udto::UiAppendToDownload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.illust_id, serializer);
        <String>::sse_encode(self.illust_title, serializer);
        <String>::sse_encode(self.illust_type, serializer);
        <i64>::sse_encode(self.image_idx, serializer);
        <String>::sse_encode(self.square_medium, serializer);
        <String>::sse_encode(self.medium, serializer);
        <String>::sse_encode(self.large, serializer);
        <String>::sse_encode(self.original, serializer);
    }
}

impl SseEncode for crate::udto::UiDownloading {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.hash, serializer);
        <i64>::sse_encode(self.illust_id, serializer);
        <String>::sse_encode(self.illust_title, serializer);
        <String>::sse_encode(self.illust_type, serializer);
        <i64>::sse_encode(self.image_idx, serializer);
        <String>::sse_encode(self.square_medium, serializer);
        <String>::sse_encode(self.medium, serializer);
        <String>::sse_encode(self.large, serializer);
        <String>::sse_encode(self.original, serializer);
        <i32>::sse_encode(self.download_status, serializer);
        <String>::sse_encode(self.error_msg, serializer);
    }
}

impl SseEncode for crate::udto::UiIllustRankQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.mode, serializer);
        <String>::sse_encode(self.date, serializer);
    }
}

impl SseEncode for crate::udto::UiIllustSearchQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.mode, serializer);
        <String>::sse_encode(self.word, serializer);
    }
}

impl SseEncode for crate::udto::UiLoginByCodeQuery {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.code, serializer);
        <String>::sse_encode(self.verify, serializer);
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::pixirust::entities::User {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.account, serializer);
        <String>::sse_encode(self.comment, serializer);
        <i64>::sse_encode(self.id, serializer);
        <bool>::sse_encode(self.is_access_blocking_user, serializer);
        <bool>::sse_encode(self.is_followed, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::pixirust::entities::ProfileImageUrls>::sse_encode(
            self.profile_image_urls,
            serializer,
        );
    }
}

impl SseEncode for crate::pixirust::entities::UserDetail {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::pixirust::entities::Profile>::sse_encode(self.profile, serializer);
        <crate::pixirust::entities::ProfilePublicity>::sse_encode(
            self.profile_publicity,
            serializer,
        );
        <crate::pixirust::entities::User>::sse_encode(self.user, serializer);
        <crate::pixirust::entities::Workspace>::sse_encode(self.workspace, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::UserSample {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.account, serializer);
        <crate::pixirust::entities::ProfileImageUrls>::sse_encode(
            self.profile_image_urls,
            serializer,
        );
        <bool>::sse_encode(self.is_followed, serializer);
    }
}

impl SseEncode for crate::pixirust::entities::Workspace {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.chair, serializer);
        <String>::sse_encode(self.comment, serializer);
        <String>::sse_encode(self.desk, serializer);
        <String>::sse_encode(self.desktop, serializer);
        <String>::sse_encode(self.monitor, serializer);
        <String>::sse_encode(self.mouse, serializer);
        <String>::sse_encode(self.music, serializer);
        <String>::sse_encode(self.pc, serializer);
        <String>::sse_encode(self.printer, serializer);
        <String>::sse_encode(self.scanner, serializer);
        <String>::sse_encode(self.tablet, serializer);
        <String>::sse_encode(self.tool, serializer);
        <Option<String>>::sse_encode(self.workspace_image_url, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
